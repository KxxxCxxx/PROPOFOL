/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.16
 * Generated at: 2019-04-19 04:08:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class portfolioCreation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String ctx = request.getContextPath(); //콘텍스트명 얻어오기.

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>SmartEditor</title>\r\n");
      out.write("\r\n");
      out.write("<!-- SmartEditor를 사용하기 위해서 다음 js파일을 추가 (경로 확인) -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(ctx);
      out.write("/SE2/js/HuskyEZCreator.js\"\r\n");
      out.write("\tcharset=\"utf-8\"></script>\r\n");
      out.write("<!-- jQuery를 사용하기위해 jQuery라이브러리 추가 -->\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"http://code.jquery.com/jquery-1.9.0.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar oEditors = [];\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\tnhn.husky.EZCreator.createInIFrame({\r\n");
      out.write("\t\t\toAppRef : oEditors,\r\n");
      out.write("\t\t\telPlaceHolder : \"ir1\", //textarea에서 지정한 id와 일치해야 합니다. \r\n");
      out.write("\t\t\t//SmartEditor2Skin.html 파일이 존재하는 경로\r\n");
      out.write("\t\t\tsSkinURI : \"SE2/SmartEditor2Skin.html\",\r\n");
      out.write("\t\t\thtParams : {\r\n");
      out.write("\t\t\t\t// 툴바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t\tbUseToolbar : true,\r\n");
      out.write("\t\t\t\t// 입력창 크기 조절바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t\tbUseVerticalResizer : true,\r\n");
      out.write("\t\t\t\t// 모드 탭(Editor | HTML | TEXT) 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t\tbUseModeChanger : true,\r\n");
      out.write("\t\t\t\tfOnBeforeUnload : function() {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tfOnAppLoad : function() {\r\n");
      out.write("\t\t\t\t//기존 저장된 내용의 text 내용을 에디터상에 뿌려주고자 할때 사용\r\n");
      out.write("\t\t\t\toEditors.getById[\"ir1\"].exec(\"PASTE_HTML\",\r\n");
      out.write("\t\t\t\t\t\t[ \"포트폴리오 만들기 !!\" ]);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tfCreator : \"createSEditor2\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//저장버튼 클릭시 form 전송\r\n");
      out.write("\t\t$(\"#save\").click(function() {\r\n");
      out.write("\t\t\toEditors.getById[\"ir1\"].exec(\"UPDATE_CONTENTS_FIELD\", []);\r\n");
      out.write("\t\t\t$(\"#frm\").submit();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("html{\r\n");
      out.write("\tbackground: #333 url(/images/classy_fabric.png);\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("}\r\n");
      out.write("#title{\r\n");
      out.write("\tbackground: #333 url(/images/classy_fabric.png);\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<form id=\"frm\" action=\"portfolioSave\" method=\"post\">\r\n");
      out.write("\t<input type=\"hidden\" id=\"thumbnailName\" name=\"thumbnailName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${thumbnailName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("\t\t<table width=\"100%\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" id=\"title\" name=\"title\"\r\n");
      out.write("\t\t\t\t\tstyle=\"width: 1200px\" value=\"포트폴리오 타이틀을 입력해주세요.\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><textarea rows=\"10\" cols=\"30\" id=\"ir1\" name=\"content\"\r\n");
      out.write("\t\t\t\t\t\tstyle=\"width: 1200px; height: auto;\"></textarea></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"2\"><input type=\"button\" id=\"save\" value=\"저장\" /> <input\r\n");
      out.write("\t\t\t\t\ttype=\"button\" value=\"취소\" /></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
